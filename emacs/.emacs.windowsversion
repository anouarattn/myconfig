;; windows .emacs files
;; zenburn theme
;;(load-file "~/.emacs.d/theme/ample-zen-theme.el")
;;(require 'ample-zen-theme)
(load-theme 'tango-dark t)
;; pdf mode for latex
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-PDF-mode t)
; '(custom-safe-themes
 ;  (quote
  ;  ("fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" "1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" default)))
 '(delete-selection-mode t)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(initial-scratch-message nil)
 '(ispell-program-name "aspell")
 '(recentf-menu-before nil)
 '(recentf-mode t)
 '(setq tex-command)
 '(shift-select-mode nil))
    (tool-bar-mode -1)

;;var load-path : path container
;; To add a single directory to the front of your ‘load-path’ (add-to-list 'load-path "~/.emacs.d/lisp/")

 
;;; auto-complete package
(add-to-list 'load-path "/.emacs.d/auto-complete/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/.emacs.d/auto-complete/ac-dict")
(ac-config-default)

;;htmlize 
(add-to-list 'load-path "/.emacs.d/htmlize")


;; web-beautify
(add-to-list 'load-path "/.emacs.d/web-beautify/")
(require 'web-beautify) ;; Not necessary if using ELPA package
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))

(eval-after-load 'js2-mode
  '(add-hook 'js2-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(add-hook 'js-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

(eval-after-load 'json-mode
  '(add-hook 'json-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

(eval-after-load 'sgml-mode
  '(add-hook 'html-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))

(eval-after-load 'css-mode
  '(add-hook 'css-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-css-buffer t t))))

;; ac-math package
(require 'ac-math)

(add-to-list 'ac-modes 'latex-mode)   ; make auto-complete aware of `latex-mode`

(defun ac-latex-mode-setup ()         ; add ac-sources to default ac-sources
  (setq ac-sources
     (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
               ac-sources)))

(add-hook 'latex-mode-hook 'ac-latex-mode-setup)

;; httpd
(add-to-list 'load-path "/.emacs.d/simple-httpd/")
(require 'simple-httpd)
(setq httpd-root "Users/anouarattn/Dropbox/project")

;; js2-mode
(add-to-list 'load-path "/.emacs.d/js2-mode/")
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))




;; hide GNU emacs message
(setq inhibit-startup-message t)






(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'erase-buffer 'disabled nil)


;; melpa repo
(require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
 


;; yasnippet
(add-to-list 'load-path "/.emacs.d/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

; undo tree
(add-to-list 'load-path "/.emacs.d/undo-tree")

(require 'undo-tree)
(global-undo-tree-mode 1)

(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-z") 'undo) ; 【Ctrl+z】

(global-set-key (kbd "C-S-z") 'redo) ; 【Ctrl+Shift+z】;  Mac style

(global-set-key (kbd "C-y") 'redo) ; 【Ctrl+y】; Microsoft Windows style


;; bip off in windows
 (setq ring-bell-function 'ignore)

;; wheel mouse scroll
(mouse-wheel-mode t)

;; f1 f2 f3 copy cut past
(defun xah-copy-line-or-region ()
  "Copy current line, or text selection.
When `universal-argument' is called first, copy whole buffer (but respect `narrow-to-region')."
  (interactive)
  (let (p1 p2)
    (if (null current-prefix-arg)
        (progn (if (use-region-p)
                   (progn (setq p1 (region-beginning))
                          (setq p2 (region-end)))
                 (progn (setq p1 (line-beginning-position))
                        (setq p2 (line-end-position)))))
      (progn (setq p1 (point-min))
             (setq p2 (point-max))))
    (kill-ring-save p1 p2)))
(defun xah-cut-line-or-region ()
  "Cut current line, or text selection.
When `universal-argument' is called first, cut whole buffer (but respect `narrow-to-region')."
  (interactive)
  (let (p1 p2)
    (if (null current-prefix-arg)
        (progn (if (use-region-p)
                   (progn (setq p1 (region-beginning))
                          (setq p2 (region-end)))
                 (progn (setq p1 (line-beginning-position))
                        (setq p2 (line-beginning-position 2)))))
      (progn (setq p1 (point-min))
             (setq p2 (point-max))))
    (kill-region p1 p2)))
(global-set-key (kbd "<f2>") 'xah-cut-line-or-region) ; cut
(global-set-key (kbd "<f1>") 'xah-copy-line-or-region) ; copy
(global-set-key (kbd "C-v") 'yank) ; paste

;;electric-pair-mode. When on, typing any left bracket automatically insert the right matching bracket.
;(electric-pair-mode t)
;; make electric-pair-mode work on more brackets
;(setq electric-pair-pairs '(
 ;                           (?\" . ?\")
  ;                          (?\{ . ?\})
   ;                         ) )

; smartparens   : auto close brackets
(add-to-list 'load-path "/.emacs.d/smartparens")
(require 'smartparens-config)



;; have matching parenthesis highlighted
(show-paren-mode 1) ; turn on paren match highlighting
(setq show-paren-style 'parenthesis) ; highlight entire bracket expression(show-paren-mode 1) ; turn on paren match highlighting (setq show-paren-style ') ; highlight just brackets



; css view color
(add-to-list 'load-path "/.emacs.d/csscolorview")
(require 'rainbow-mode)
(add-hook 'css-mode-hook 'my-css-mode-hook)
(defun my-css-mode-hook ()
  (rainbow-mode 1))

; column-number-mode
(column-number-mode 1)

		     
; refresh buffer
					
 (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))
(global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)

; web-mode
(add-to-list 'load-path "/.emacs.d/web-mode")
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
;(setq web-mode-ac-sources-alist '(("css" . (ac-source-css-property)) ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
 ;(add-to-list 'ac-modes 'web-mode)

;save on loss of input focus
;(defun save-all ()
;    (interactive)
;    (save-some-buffers t))
;  (add-hook 'focus-out-hook 'save-all)

;; shift + arrow keys to switch between visible buffers
(require 'windmove)
(windmove-default-keybindings)

;; automatically save buffers associated with files on buffer switch
;; and on windows switch
(defadvice switch-to-buffer (before save-buffer-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice other-window (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-up (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-down (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-left (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-right (before other-window-now activate)
  (when buffer-file-name (save-buffer)))

; flx-ido 
;(add-to-list 'load-path "/.emacs.d/flx-ido")
;(require 'flx-ido)
;(flx-ido)


; ido-vertical-mode
(add-to-list 'load-path "/.emacs.d/ido-vertical-mode")
(require 'ido-vertical-mode)
(ido-vertical-mode)


; ido for M-x with smex
(add-to-list 'load-path "/.emacs.d/smex")
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                  ; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

; ido for others 
(add-to-list 'load-path "/.emacs.d/ido-ubiquitous")
(require 'ido-ubiquitous)


;(add-to-list 'load-path "~/.emacs.d/evil")  
;(require 'evil)  
;(evil-mode 1)

; define your own next-user-buffer that skips emacs's buffers, and you might define next-emacs-buffer that cycles thru just the emacs's buffers.
(defun next-user-buffer ()
  "Switch to the next user buffer.
User buffers are those whose name does not start with *."
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (string-match "^*" (buffer-name)) (< i 50))
      (setq i (1+ i)) (next-buffer) )))

(defun previous-user-buffer ()
  "Switch to the previous user buffer.
User buffers are those whose name does not start with *."
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (string-match "^*" (buffer-name)) (< i 50))
      (setq i (1+ i)) (previous-buffer) )))

(defun next-emacs-buffer ()
  "Switch to the next emacs buffer.
Emacs buffers are those whose name starts with *."
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (not (string-match "^*" (buffer-name))) (< i 50))
      (setq i (1+ i)) (next-buffer) )))

(defun previous-emacs-buffer ()
  "Switch to the previous emacs buffer.
Emacs buffers are those whose name starts with *."
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (not (string-match "^*" (buffer-name))) (< i 50))
      (setq i (1+ i)) (previous-buffer) ))) 
;; sample easy keys



(global-set-key (kbd "<C-prior>") 'previous-user-buffer) ; Ctrl+PageUp
(global-set-key (kbd "<C-next>") 'next-user-buffer) ; Ctrl+PageDown
(global-set-key (kbd "<C-S-prior>") 'previous-emacs-buffer) ; Ctrl+Shift+PageUp
(global-set-key (kbd "<C-S-next>") 'next-emacs-buffer) ; Ctrl+Shift+PageDown

;; neotree
(add-to-list 'load-path "/.emacs.d/neotree")
(require 'neotree)
(global-set-key [f9] 'neotree-toggle)

; move text 
(add-to-list 'load-path "/.emacs.d/move-text-20140307.1644")
(require 'move-text)
(move-text-default-bindings)

; anzu : show search number of match
(add-to-list 'load-path "/.emacs.d/anzu")
(require 'anzu)
(global-anzu-mode +1)
(global-set-key (kbd "M-%") 'anzu-query-replace)
(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
(set-face-attribute 'anzu-mode-line nil
                    :foreground "DarkSlateGray" :weight 'bold)

; css completion
(add-to-list 'load-path "/.emacs.d/csscompletion")
(require 'mon-css-complete)

;yafolding tool 
(add-to-list 'load-path "/.emacs.d/yafolding")
(require 'yafolding)
(add-hook 'prog-mode-hook
          (lambda () (yafolding-mode)))
(global-set-key (kbd "<f6>") 'yafolding-toggle-element)


;ido-at-point 
;(add-to-list 'load-path "/.emacs.d/ido-at-point")
;(require 'ido-at-point)

; css check 
;(add-to-list 'load-path "/.emacs.d/csscheck")
;(require 'mon-css-check)

; helm 
;(add-to-list 'load-path "/.emacs/helm")
;(require 'helm-config)


; helm-css 
;(add-to-list 'load-path "/.emacs.d/helmcssscss")
;(require 'helm-css-scss)
